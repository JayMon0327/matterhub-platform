#!/bin/bash
set -euo pipefail

TARGET_FILE="/home/hyodol/Desktop/matterhub-platform/ot-br-posix/third_party/openthread/repo/src/posix/platform/multicast_routing.cpp"
BACKUP_FILE="${TARGET_FILE}.bak"
EXPECTED_SIGNATURE="void MulticastRoutingManager::InitMulticastRouterSock(void)"

echo "üìå ÎåÄÏÉÅ ÌååÏùº: $TARGET_FILE"

# 1. Î∞±ÏóÖ
if [ ! -f "$BACKUP_FILE" ]; then
    cp "$TARGET_FILE" "$BACKUP_FILE"
    echo "üîÅ Î∞±ÏóÖ ÏÉùÏÑ±: $BACKUP_FILE"
fi

# 2. Ìï®Ïàò ÏãúÏûë Ï§Ñ Ï∞æÍ∏∞
PATCH_START_LINE=$(grep -n "^$EXPECTED_SIGNATURE" "$TARGET_FILE" | cut -d: -f1 || true)

if [[ -z "$PATCH_START_LINE" ]]; then
    echo "‚ùå Ìï®Ïàò ÏãúÍ∑∏ÎãàÏ≤òÎ•º ÌååÏùºÏóêÏÑú Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
    echo "   ÏòàÏÉÅ ÏãúÍ∑∏ÎãàÏ≤ò: $EXPECTED_SIGNATURE"
    exit 1
fi

echo "üîç Ìï®Ïàò ÏãúÏûë ÏúÑÏπò: $PATCH_START_LINEÏ§Ñ"

# 3. Í∏∞Ï°¥ Ìï®Ïàò Ï†úÍ±∞ (Ï§ëÍ¥ÑÌò∏ ÏàòÎ°ú Î∏îÎ°ù ÌåêÎã®)
echo "üõ†Ô∏è  InitMulticastRouterSock() Ìï®Ïàò Ìå®Ïπò Ï§ë..."

# ÏÉÅÎã®Î∂Ä Î≥¥Ï°¥
head -n $((PATCH_START_LINE - 1)) "$TARGET_FILE" > "${TARGET_FILE}.patched"

# ÏÉàÎ°úÏö¥ Ìï®Ïàò Ï†ïÏùò Ï∂îÍ∞Ä
cat >> "${TARGET_FILE}.patched" <<'EOF'
void MulticastRoutingManager::InitMulticastRouterSock(void)
{
    int                 one = 1;
    struct icmp6_filter filter;
    struct mif6ctl      mif6ctl;

    // Create a Multicast Routing socket
    mMulticastRouterSock = SocketWithCloseExec(AF_INET6, SOCK_RAW, IPPROTO_ICMPV6, kSocketBlock);
    VerifyOrDie(mMulticastRouterSock != -1, OT_EXIT_ERROR_ERRNO);

    // Enable Multicast Forwarding in Kernel (MRT6_INIT)
    if (setsockopt(mMulticastRouterSock, IPPROTO_IPV6, MRT6_INIT, &one, sizeof(one)) != 0)
    {
        if (errno == ENOPROTOOPT)
        {
            fprintf(stderr, "MulticastRoutingManager: MRT6_INIT not supported by kernel, skipping multicast routing setup.\n");
            close(mMulticastRouterSock);
            mMulticastRouterSock = -1;
            return;
        }
        else
        {
            VerifyOrDie(false, OT_EXIT_ERROR_ERRNO);
        }
    }

    ICMP6_FILTER_SETBLOCKALL(&filter);
    VerifyOrDie(0 == setsockopt(mMulticastRouterSock, IPPROTO_ICMPV6, ICMP6_FILTER, (void *)&filter, sizeof(filter)),
                OT_EXIT_ERROR_ERRNO);

    memset(&mif6ctl, 0, sizeof(mif6ctl));
    mif6ctl.mif6c_flags     = 0;
    mif6ctl.vifc_threshold  = 1;
    mif6ctl.vifc_rate_limit = 0;

    mif6ctl.mif6c_mifi = kMifIndexThread;
    mif6ctl.mif6c_pifi = if_nametoindex(gNetifName);
    VerifyOrDie(mif6ctl.mif6c_pifi > 0, OT_EXIT_ERROR_ERRNO);
    VerifyOrDie(0 == setsockopt(mMulticastRouterSock, IPPROTO_IPV6, MRT6_ADD_MIF, &mif6ctl, sizeof(mif6ctl)),
                OT_EXIT_ERROR_ERRNO);

    mif6ctl.mif6c_mifi = kMifIndexBackbone;
    mif6ctl.mif6c_pifi = otSysGetInfraNetifIndex();
    VerifyOrDie(mif6ctl.mif6c_pifi > 0, OT_EXIT_ERROR_ERRNO);
    VerifyOrDie(0 == setsockopt(mMulticastRouterSock, IPPROTO_IPV6, MRT6_ADD_MIF, &mif6ctl, sizeof(mif6ctl)),
                OT_EXIT_ERROR_ERRNO);
}
EOF

# ÌïòÎã®Î∂Ä Ïù¥Ïñ¥Î∂ôÏù¥Í∏∞ (Í∏∞Ï°¥ Ìï®Ïàò Î∏îÎ°ù Í±¥ÎÑàÎõ∞Í∏∞)
tail -n +$((PATCH_START_LINE + 1)) "$TARGET_FILE" | awk '
    BEGIN { skip = 1; braces = 0 }
    {
        if (skip) {
            braces += gsub("{", "{")
            braces -= gsub("}", "}")
            if (braces <= 0) {
                skip = 0
                next
            } else {
                next
            }
        }
        print
    }
' >> "${TARGET_FILE}.patched"

mv "${TARGET_FILE}.patched" "$TARGET_FILE"
echo "‚úÖ Ìå®Ïπò ÏôÑÎ£å: $TARGET_FILE"
